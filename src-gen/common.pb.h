// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto 

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2eproto
class BucketKeyAddress;
class BucketKeyAddressDefaultTypeInternal;
extern BucketKeyAddressDefaultTypeInternal _BucketKeyAddress_default_instance_;
class BucketKeyTuple;
class BucketKeyTupleDefaultTypeInternal;
extern BucketKeyTupleDefaultTypeInternal _BucketKeyTuple_default_instance_;
namespace google {
namespace protobuf {
template<> ::BucketKeyAddress* Arena::CreateMaybeMessage<::BucketKeyAddress>(Arena*);
template<> ::BucketKeyTuple* Arena::CreateMaybeMessage<::BucketKeyTuple>(Arena*);
}  // namespace protobuf
}  // namespace google

enum KVSError {
  SUCCESS = 0,
  BUCKET_NE = 1,
  KEY_NE = 2,
  SESSION_NE = 3,
  KVS_ND = 4,
  TYPE_NM = 5,
  BUCKET_EXIST = 6,
  REQ_TIMEOUT = 7,
  KVSError_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KVSError_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KVSError_IsValid(int value);
const KVSError KVSError_MIN = SUCCESS;
const KVSError KVSError_MAX = REQ_TIMEOUT;
const int KVSError_ARRAYSIZE = KVSError_MAX + 1;

const ::google::protobuf::EnumDescriptor* KVSError_descriptor();
inline const ::std::string& KVSError_Name(KVSError value) {
  return ::google::protobuf::internal::NameOfEnum(
    KVSError_descriptor(), value);
}
inline bool KVSError_Parse(
    const ::std::string& name, KVSError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KVSError>(
    KVSError_descriptor(), name, value);
}
// ===================================================================

class BucketKeyTuple : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BucketKeyTuple) */ {
 public:
  BucketKeyTuple();
  virtual ~BucketKeyTuple();

  BucketKeyTuple(const BucketKeyTuple& from);

  inline BucketKeyTuple& operator=(const BucketKeyTuple& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BucketKeyTuple(BucketKeyTuple&& from) noexcept
    : BucketKeyTuple() {
    *this = ::std::move(from);
  }

  inline BucketKeyTuple& operator=(BucketKeyTuple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketKeyTuple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BucketKeyTuple* internal_default_instance() {
    return reinterpret_cast<const BucketKeyTuple*>(
               &_BucketKeyTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BucketKeyTuple* other);
  friend void swap(BucketKeyTuple& a, BucketKeyTuple& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BucketKeyTuple* New() const final {
    return CreateMaybeMessage<BucketKeyTuple>(NULL);
  }

  BucketKeyTuple* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BucketKeyTuple>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BucketKeyTuple& from);
  void MergeFrom(const BucketKeyTuple& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketKeyTuple* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bucket = 1;
  void clear_bucket();
  static const int kBucketFieldNumber = 1;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string session = 3;
  void clear_session();
  static const int kSessionFieldNumber = 3;
  const ::std::string& session() const;
  void set_session(const ::std::string& value);
  #if LANG_CXX11
  void set_session(::std::string&& value);
  #endif
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  ::std::string* mutable_session();
  ::std::string* release_session();
  void set_allocated_session(::std::string* session);

  // bytes payload = 4;
  void clear_payload();
  static const int kPayloadFieldNumber = 4;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:BucketKeyTuple)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr session_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BucketKeyAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BucketKeyAddress) */ {
 public:
  BucketKeyAddress();
  virtual ~BucketKeyAddress();

  BucketKeyAddress(const BucketKeyAddress& from);

  inline BucketKeyAddress& operator=(const BucketKeyAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BucketKeyAddress(BucketKeyAddress&& from) noexcept
    : BucketKeyAddress() {
    *this = ::std::move(from);
  }

  inline BucketKeyAddress& operator=(BucketKeyAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketKeyAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BucketKeyAddress* internal_default_instance() {
    return reinterpret_cast<const BucketKeyAddress*>(
               &_BucketKeyAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BucketKeyAddress* other);
  friend void swap(BucketKeyAddress& a, BucketKeyAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BucketKeyAddress* New() const final {
    return CreateMaybeMessage<BucketKeyAddress>(NULL);
  }

  BucketKeyAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BucketKeyAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BucketKeyAddress& from);
  void MergeFrom(const BucketKeyAddress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BucketKeyAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ips = 5;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 5;
  const ::std::string& ips(int index) const;
  ::std::string* mutable_ips(int index);
  void set_ips(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ips(int index, ::std::string&& value);
  #endif
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  ::std::string* add_ips();
  void add_ips(const ::std::string& value);
  #if LANG_CXX11
  void add_ips(::std::string&& value);
  #endif
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // string bucket = 2;
  void clear_bucket();
  static const int kBucketFieldNumber = 2;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // string key = 3;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string session = 4;
  void clear_session();
  static const int kSessionFieldNumber = 4;
  const ::std::string& session() const;
  void set_session(const ::std::string& value);
  #if LANG_CXX11
  void set_session(::std::string&& value);
  #endif
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  ::std::string* mutable_session();
  ::std::string* release_session();
  void set_allocated_session(::std::string* session);

  // bytes payload = 6;
  void clear_payload();
  static const int kPayloadFieldNumber = 6;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:BucketKeyAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr session_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BucketKeyTuple

// string bucket = 1;
inline void BucketKeyTuple::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BucketKeyTuple::bucket() const {
  // @@protoc_insertion_point(field_get:BucketKeyTuple.bucket)
  return bucket_.GetNoArena();
}
inline void BucketKeyTuple::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BucketKeyTuple.bucket)
}
#if LANG_CXX11
inline void BucketKeyTuple::set_bucket(::std::string&& value) {
  
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BucketKeyTuple.bucket)
}
#endif
inline void BucketKeyTuple::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BucketKeyTuple.bucket)
}
inline void BucketKeyTuple::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BucketKeyTuple.bucket)
}
inline ::std::string* BucketKeyTuple::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:BucketKeyTuple.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BucketKeyTuple::release_bucket() {
  // @@protoc_insertion_point(field_release:BucketKeyTuple.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BucketKeyTuple::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:BucketKeyTuple.bucket)
}

// string key = 2;
inline void BucketKeyTuple::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BucketKeyTuple::key() const {
  // @@protoc_insertion_point(field_get:BucketKeyTuple.key)
  return key_.GetNoArena();
}
inline void BucketKeyTuple::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BucketKeyTuple.key)
}
#if LANG_CXX11
inline void BucketKeyTuple::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BucketKeyTuple.key)
}
#endif
inline void BucketKeyTuple::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BucketKeyTuple.key)
}
inline void BucketKeyTuple::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BucketKeyTuple.key)
}
inline ::std::string* BucketKeyTuple::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:BucketKeyTuple.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BucketKeyTuple::release_key() {
  // @@protoc_insertion_point(field_release:BucketKeyTuple.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BucketKeyTuple::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:BucketKeyTuple.key)
}

// string session = 3;
inline void BucketKeyTuple::clear_session() {
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BucketKeyTuple::session() const {
  // @@protoc_insertion_point(field_get:BucketKeyTuple.session)
  return session_.GetNoArena();
}
inline void BucketKeyTuple::set_session(const ::std::string& value) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BucketKeyTuple.session)
}
#if LANG_CXX11
inline void BucketKeyTuple::set_session(::std::string&& value) {
  
  session_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BucketKeyTuple.session)
}
#endif
inline void BucketKeyTuple::set_session(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BucketKeyTuple.session)
}
inline void BucketKeyTuple::set_session(const char* value, size_t size) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BucketKeyTuple.session)
}
inline ::std::string* BucketKeyTuple::mutable_session() {
  
  // @@protoc_insertion_point(field_mutable:BucketKeyTuple.session)
  return session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BucketKeyTuple::release_session() {
  // @@protoc_insertion_point(field_release:BucketKeyTuple.session)
  
  return session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BucketKeyTuple::set_allocated_session(::std::string* session) {
  if (session != NULL) {
    
  } else {
    
  }
  session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session);
  // @@protoc_insertion_point(field_set_allocated:BucketKeyTuple.session)
}

// bytes payload = 4;
inline void BucketKeyTuple::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BucketKeyTuple::payload() const {
  // @@protoc_insertion_point(field_get:BucketKeyTuple.payload)
  return payload_.GetNoArena();
}
inline void BucketKeyTuple::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BucketKeyTuple.payload)
}
#if LANG_CXX11
inline void BucketKeyTuple::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BucketKeyTuple.payload)
}
#endif
inline void BucketKeyTuple::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BucketKeyTuple.payload)
}
inline void BucketKeyTuple::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BucketKeyTuple.payload)
}
inline ::std::string* BucketKeyTuple::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:BucketKeyTuple.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BucketKeyTuple::release_payload() {
  // @@protoc_insertion_point(field_release:BucketKeyTuple.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BucketKeyTuple::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:BucketKeyTuple.payload)
}

// -------------------------------------------------------------------

// BucketKeyAddress

// string bucket = 2;
inline void BucketKeyAddress::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BucketKeyAddress::bucket() const {
  // @@protoc_insertion_point(field_get:BucketKeyAddress.bucket)
  return bucket_.GetNoArena();
}
inline void BucketKeyAddress::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BucketKeyAddress.bucket)
}
#if LANG_CXX11
inline void BucketKeyAddress::set_bucket(::std::string&& value) {
  
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BucketKeyAddress.bucket)
}
#endif
inline void BucketKeyAddress::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BucketKeyAddress.bucket)
}
inline void BucketKeyAddress::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BucketKeyAddress.bucket)
}
inline ::std::string* BucketKeyAddress::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:BucketKeyAddress.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BucketKeyAddress::release_bucket() {
  // @@protoc_insertion_point(field_release:BucketKeyAddress.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BucketKeyAddress::set_allocated_bucket(::std::string* bucket) {
  if (bucket != NULL) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:BucketKeyAddress.bucket)
}

// string key = 3;
inline void BucketKeyAddress::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BucketKeyAddress::key() const {
  // @@protoc_insertion_point(field_get:BucketKeyAddress.key)
  return key_.GetNoArena();
}
inline void BucketKeyAddress::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BucketKeyAddress.key)
}
#if LANG_CXX11
inline void BucketKeyAddress::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BucketKeyAddress.key)
}
#endif
inline void BucketKeyAddress::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BucketKeyAddress.key)
}
inline void BucketKeyAddress::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BucketKeyAddress.key)
}
inline ::std::string* BucketKeyAddress::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:BucketKeyAddress.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BucketKeyAddress::release_key() {
  // @@protoc_insertion_point(field_release:BucketKeyAddress.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BucketKeyAddress::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:BucketKeyAddress.key)
}

// string session = 4;
inline void BucketKeyAddress::clear_session() {
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BucketKeyAddress::session() const {
  // @@protoc_insertion_point(field_get:BucketKeyAddress.session)
  return session_.GetNoArena();
}
inline void BucketKeyAddress::set_session(const ::std::string& value) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BucketKeyAddress.session)
}
#if LANG_CXX11
inline void BucketKeyAddress::set_session(::std::string&& value) {
  
  session_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BucketKeyAddress.session)
}
#endif
inline void BucketKeyAddress::set_session(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BucketKeyAddress.session)
}
inline void BucketKeyAddress::set_session(const char* value, size_t size) {
  
  session_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BucketKeyAddress.session)
}
inline ::std::string* BucketKeyAddress::mutable_session() {
  
  // @@protoc_insertion_point(field_mutable:BucketKeyAddress.session)
  return session_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BucketKeyAddress::release_session() {
  // @@protoc_insertion_point(field_release:BucketKeyAddress.session)
  
  return session_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BucketKeyAddress::set_allocated_session(::std::string* session) {
  if (session != NULL) {
    
  } else {
    
  }
  session_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session);
  // @@protoc_insertion_point(field_set_allocated:BucketKeyAddress.session)
}

// repeated string ips = 5;
inline int BucketKeyAddress::ips_size() const {
  return ips_.size();
}
inline void BucketKeyAddress::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& BucketKeyAddress::ips(int index) const {
  // @@protoc_insertion_point(field_get:BucketKeyAddress.ips)
  return ips_.Get(index);
}
inline ::std::string* BucketKeyAddress::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:BucketKeyAddress.ips)
  return ips_.Mutable(index);
}
inline void BucketKeyAddress::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BucketKeyAddress.ips)
  ips_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BucketKeyAddress::set_ips(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:BucketKeyAddress.ips)
  ips_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BucketKeyAddress::set_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BucketKeyAddress.ips)
}
inline void BucketKeyAddress::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BucketKeyAddress.ips)
}
inline ::std::string* BucketKeyAddress::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:BucketKeyAddress.ips)
  return ips_.Add();
}
inline void BucketKeyAddress::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BucketKeyAddress.ips)
}
#if LANG_CXX11
inline void BucketKeyAddress::add_ips(::std::string&& value) {
  ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BucketKeyAddress.ips)
}
#endif
inline void BucketKeyAddress::add_ips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BucketKeyAddress.ips)
}
inline void BucketKeyAddress::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BucketKeyAddress.ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BucketKeyAddress::ips() const {
  // @@protoc_insertion_point(field_list:BucketKeyAddress.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BucketKeyAddress::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:BucketKeyAddress.ips)
  return &ips_;
}

// bytes payload = 6;
inline void BucketKeyAddress::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BucketKeyAddress::payload() const {
  // @@protoc_insertion_point(field_get:BucketKeyAddress.payload)
  return payload_.GetNoArena();
}
inline void BucketKeyAddress::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BucketKeyAddress.payload)
}
#if LANG_CXX11
inline void BucketKeyAddress::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BucketKeyAddress.payload)
}
#endif
inline void BucketKeyAddress::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BucketKeyAddress.payload)
}
inline void BucketKeyAddress::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BucketKeyAddress.payload)
}
inline ::std::string* BucketKeyAddress::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:BucketKeyAddress.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BucketKeyAddress::release_payload() {
  // @@protoc_insertion_point(field_release:BucketKeyAddress.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BucketKeyAddress::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:BucketKeyAddress.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KVSError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KVSError>() {
  return ::KVSError_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2eproto
