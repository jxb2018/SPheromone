// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvs.proto

#ifndef PROTOBUF_INCLUDED_kvs_2eproto
#define PROTOBUF_INCLUDED_kvs_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_kvs_2eproto 

namespace protobuf_kvs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_kvs_2eproto
class KeyNotifyRequest;
class KeyNotifyRequestDefaultTypeInternal;
extern KeyNotifyRequestDefaultTypeInternal _KeyNotifyRequest_default_instance_;
class KeyNotifyResponse;
class KeyNotifyResponseDefaultTypeInternal;
extern KeyNotifyResponseDefaultTypeInternal _KeyNotifyResponse_default_instance_;
class KeyQueryRequest;
class KeyQueryRequestDefaultTypeInternal;
extern KeyQueryRequestDefaultTypeInternal _KeyQueryRequest_default_instance_;
class KeyQueryResponse;
class KeyQueryResponseDefaultTypeInternal;
extern KeyQueryResponseDefaultTypeInternal _KeyQueryResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::KeyNotifyRequest* Arena::CreateMaybeMessage<::KeyNotifyRequest>(Arena*);
template<> ::KeyNotifyResponse* Arena::CreateMaybeMessage<::KeyNotifyResponse>(Arena*);
template<> ::KeyQueryRequest* Arena::CreateMaybeMessage<::KeyQueryRequest>(Arena*);
template<> ::KeyQueryResponse* Arena::CreateMaybeMessage<::KeyQueryResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

enum KeyRequestType {
  FETCH = 0,
  KeyRequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KeyRequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KeyRequestType_IsValid(int value);
const KeyRequestType KeyRequestType_MIN = FETCH;
const KeyRequestType KeyRequestType_MAX = FETCH;
const int KeyRequestType_ARRAYSIZE = KeyRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* KeyRequestType_descriptor();
inline const ::std::string& KeyRequestType_Name(KeyRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    KeyRequestType_descriptor(), value);
}
inline bool KeyRequestType_Parse(
    const ::std::string& name, KeyRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KeyRequestType>(
    KeyRequestType_descriptor(), name, value);
}
enum HelperResponseType {
  REMOTE_GET = 0,
  NOTIF_PUT = 1,
  HelperResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HelperResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HelperResponseType_IsValid(int value);
const HelperResponseType HelperResponseType_MIN = REMOTE_GET;
const HelperResponseType HelperResponseType_MAX = NOTIF_PUT;
const int HelperResponseType_ARRAYSIZE = HelperResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HelperResponseType_descriptor();
inline const ::std::string& HelperResponseType_Name(HelperResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HelperResponseType_descriptor(), value);
}
inline bool HelperResponseType_Parse(
    const ::std::string& name, HelperResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HelperResponseType>(
    HelperResponseType_descriptor(), name, value);
}
// ===================================================================

class KeyQueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyQueryRequest) */ {
 public:
  KeyQueryRequest();
  virtual ~KeyQueryRequest();

  KeyQueryRequest(const KeyQueryRequest& from);

  inline KeyQueryRequest& operator=(const KeyQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyQueryRequest(KeyQueryRequest&& from) noexcept
    : KeyQueryRequest() {
    *this = ::std::move(from);
  }

  inline KeyQueryRequest& operator=(KeyQueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyQueryRequest* internal_default_instance() {
    return reinterpret_cast<const KeyQueryRequest*>(
               &_KeyQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(KeyQueryRequest* other);
  friend void swap(KeyQueryRequest& a, KeyQueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyQueryRequest* New() const final {
    return CreateMaybeMessage<KeyQueryRequest>(NULL);
  }

  KeyQueryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyQueryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyQueryRequest& from);
  void MergeFrom(const KeyQueryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyQueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BucketKeyAddress addresses = 2;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  ::BucketKeyAddress* mutable_addresses(int index);
  ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >*
      mutable_addresses();
  const ::BucketKeyAddress& addresses(int index) const;
  ::BucketKeyAddress* add_addresses();
  const ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >&
      addresses() const;

  // string response_address = 1;
  void clear_response_address();
  static const int kResponseAddressFieldNumber = 1;
  const ::std::string& response_address() const;
  void set_response_address(const ::std::string& value);
  #if LANG_CXX11
  void set_response_address(::std::string&& value);
  #endif
  void set_response_address(const char* value);
  void set_response_address(const char* value, size_t size);
  ::std::string* mutable_response_address();
  ::std::string* release_response_address();
  void set_allocated_response_address(::std::string* response_address);

  // string request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // @@protoc_insertion_point(class_scope:KeyQueryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress > addresses_;
  ::google::protobuf::internal::ArenaStringPtr response_address_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyQueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyQueryResponse) */ {
 public:
  KeyQueryResponse();
  virtual ~KeyQueryResponse();

  KeyQueryResponse(const KeyQueryResponse& from);

  inline KeyQueryResponse& operator=(const KeyQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyQueryResponse(KeyQueryResponse&& from) noexcept
    : KeyQueryResponse() {
    *this = ::std::move(from);
  }

  inline KeyQueryResponse& operator=(KeyQueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyQueryResponse* internal_default_instance() {
    return reinterpret_cast<const KeyQueryResponse*>(
               &_KeyQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(KeyQueryResponse* other);
  friend void swap(KeyQueryResponse& a, KeyQueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyQueryResponse* New() const final {
    return CreateMaybeMessage<KeyQueryResponse>(NULL);
  }

  KeyQueryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyQueryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyQueryResponse& from);
  void MergeFrom(const KeyQueryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyQueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BucketKeyAddress addresses = 1;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  ::BucketKeyAddress* mutable_addresses(int index);
  ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >*
      mutable_addresses();
  const ::BucketKeyAddress& addresses(int index) const;
  ::BucketKeyAddress* add_addresses();
  const ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >&
      addresses() const;

  // string response_id = 3;
  void clear_response_id();
  static const int kResponseIdFieldNumber = 3;
  const ::std::string& response_id() const;
  void set_response_id(const ::std::string& value);
  #if LANG_CXX11
  void set_response_id(::std::string&& value);
  #endif
  void set_response_id(const char* value);
  void set_response_id(const char* value, size_t size);
  ::std::string* mutable_response_id();
  ::std::string* release_response_id();
  void set_allocated_response_id(::std::string* response_id);

  // .KVSError error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  ::KVSError error() const;
  void set_error(::KVSError value);

  // @@protoc_insertion_point(class_scope:KeyQueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress > addresses_;
  ::google::protobuf::internal::ArenaStringPtr response_id_;
  int error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyNotifyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyNotifyRequest) */ {
 public:
  KeyNotifyRequest();
  virtual ~KeyNotifyRequest();

  KeyNotifyRequest(const KeyNotifyRequest& from);

  inline KeyNotifyRequest& operator=(const KeyNotifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyNotifyRequest(KeyNotifyRequest&& from) noexcept
    : KeyNotifyRequest() {
    *this = ::std::move(from);
  }

  inline KeyNotifyRequest& operator=(KeyNotifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyNotifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyNotifyRequest* internal_default_instance() {
    return reinterpret_cast<const KeyNotifyRequest*>(
               &_KeyNotifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(KeyNotifyRequest* other);
  friend void swap(KeyNotifyRequest& a, KeyNotifyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyNotifyRequest* New() const final {
    return CreateMaybeMessage<KeyNotifyRequest>(NULL);
  }

  KeyNotifyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyNotifyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyNotifyRequest& from);
  void MergeFrom(const KeyNotifyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyNotifyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BucketKeyAddress addresses = 2;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 2;
  ::BucketKeyAddress* mutable_addresses(int index);
  ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >*
      mutable_addresses();
  const ::BucketKeyAddress& addresses(int index) const;
  ::BucketKeyAddress* add_addresses();
  const ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >&
      addresses() const;

  // repeated string active_trigger_names = 3;
  int active_trigger_names_size() const;
  void clear_active_trigger_names();
  static const int kActiveTriggerNamesFieldNumber = 3;
  const ::std::string& active_trigger_names(int index) const;
  ::std::string* mutable_active_trigger_names(int index);
  void set_active_trigger_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_active_trigger_names(int index, ::std::string&& value);
  #endif
  void set_active_trigger_names(int index, const char* value);
  void set_active_trigger_names(int index, const char* value, size_t size);
  ::std::string* add_active_trigger_names();
  void add_active_trigger_names(const ::std::string& value);
  #if LANG_CXX11
  void add_active_trigger_names(::std::string&& value);
  #endif
  void add_active_trigger_names(const char* value);
  void add_active_trigger_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& active_trigger_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_active_trigger_names();

  // string response_address = 1;
  void clear_response_address();
  static const int kResponseAddressFieldNumber = 1;
  const ::std::string& response_address() const;
  void set_response_address(const ::std::string& value);
  #if LANG_CXX11
  void set_response_address(::std::string&& value);
  #endif
  void set_response_address(const char* value);
  void set_response_address(const char* value, size_t size);
  ::std::string* mutable_response_address();
  ::std::string* release_response_address();
  void set_allocated_response_address(::std::string* response_address);

  // string request_id = 4;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // @@protoc_insertion_point(class_scope:KeyNotifyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress > addresses_;
  ::google::protobuf::RepeatedPtrField< ::std::string> active_trigger_names_;
  ::google::protobuf::internal::ArenaStringPtr response_address_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyNotifyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyNotifyResponse) */ {
 public:
  KeyNotifyResponse();
  virtual ~KeyNotifyResponse();

  KeyNotifyResponse(const KeyNotifyResponse& from);

  inline KeyNotifyResponse& operator=(const KeyNotifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyNotifyResponse(KeyNotifyResponse&& from) noexcept
    : KeyNotifyResponse() {
    *this = ::std::move(from);
  }

  inline KeyNotifyResponse& operator=(KeyNotifyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyNotifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyNotifyResponse* internal_default_instance() {
    return reinterpret_cast<const KeyNotifyResponse*>(
               &_KeyNotifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(KeyNotifyResponse* other);
  friend void swap(KeyNotifyResponse& a, KeyNotifyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyNotifyResponse* New() const final {
    return CreateMaybeMessage<KeyNotifyResponse>(NULL);
  }

  KeyNotifyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyNotifyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyNotifyResponse& from);
  void MergeFrom(const KeyNotifyResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyNotifyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 key_counts = 2;
  int key_counts_size() const;
  void clear_key_counts();
  static const int kKeyCountsFieldNumber = 2;
  ::google::protobuf::uint32 key_counts(int index) const;
  void set_key_counts(int index, ::google::protobuf::uint32 value);
  void add_key_counts(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      key_counts() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_key_counts();

  // string response_id = 3;
  void clear_response_id();
  static const int kResponseIdFieldNumber = 3;
  const ::std::string& response_id() const;
  void set_response_id(const ::std::string& value);
  #if LANG_CXX11
  void set_response_id(::std::string&& value);
  #endif
  void set_response_id(const char* value);
  void set_response_id(const char* value, size_t size);
  ::std::string* mutable_response_id();
  ::std::string* release_response_id();
  void set_allocated_response_id(::std::string* response_id);

  // .KVSError error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::KVSError error() const;
  void set_error(::KVSError value);

  // @@protoc_insertion_point(class_scope:KeyNotifyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > key_counts_;
  mutable int _key_counts_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr response_id_;
  int error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyQueryRequest

// string response_address = 1;
inline void KeyQueryRequest::clear_response_address() {
  response_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyQueryRequest::response_address() const {
  // @@protoc_insertion_point(field_get:KeyQueryRequest.response_address)
  return response_address_.GetNoArena();
}
inline void KeyQueryRequest::set_response_address(const ::std::string& value) {
  
  response_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyQueryRequest.response_address)
}
#if LANG_CXX11
inline void KeyQueryRequest::set_response_address(::std::string&& value) {
  
  response_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyQueryRequest.response_address)
}
#endif
inline void KeyQueryRequest::set_response_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyQueryRequest.response_address)
}
inline void KeyQueryRequest::set_response_address(const char* value, size_t size) {
  
  response_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyQueryRequest.response_address)
}
inline ::std::string* KeyQueryRequest::mutable_response_address() {
  
  // @@protoc_insertion_point(field_mutable:KeyQueryRequest.response_address)
  return response_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyQueryRequest::release_response_address() {
  // @@protoc_insertion_point(field_release:KeyQueryRequest.response_address)
  
  return response_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyQueryRequest::set_allocated_response_address(::std::string* response_address) {
  if (response_address != NULL) {
    
  } else {
    
  }
  response_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_address);
  // @@protoc_insertion_point(field_set_allocated:KeyQueryRequest.response_address)
}

// repeated .BucketKeyAddress addresses = 2;
inline int KeyQueryRequest::addresses_size() const {
  return addresses_.size();
}
inline ::BucketKeyAddress* KeyQueryRequest::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:KeyQueryRequest.addresses)
  return addresses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >*
KeyQueryRequest::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:KeyQueryRequest.addresses)
  return &addresses_;
}
inline const ::BucketKeyAddress& KeyQueryRequest::addresses(int index) const {
  // @@protoc_insertion_point(field_get:KeyQueryRequest.addresses)
  return addresses_.Get(index);
}
inline ::BucketKeyAddress* KeyQueryRequest::add_addresses() {
  // @@protoc_insertion_point(field_add:KeyQueryRequest.addresses)
  return addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >&
KeyQueryRequest::addresses() const {
  // @@protoc_insertion_point(field_list:KeyQueryRequest.addresses)
  return addresses_;
}

// string request_id = 3;
inline void KeyQueryRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyQueryRequest::request_id() const {
  // @@protoc_insertion_point(field_get:KeyQueryRequest.request_id)
  return request_id_.GetNoArena();
}
inline void KeyQueryRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyQueryRequest.request_id)
}
#if LANG_CXX11
inline void KeyQueryRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyQueryRequest.request_id)
}
#endif
inline void KeyQueryRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyQueryRequest.request_id)
}
inline void KeyQueryRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyQueryRequest.request_id)
}
inline ::std::string* KeyQueryRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:KeyQueryRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyQueryRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:KeyQueryRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyQueryRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:KeyQueryRequest.request_id)
}

// -------------------------------------------------------------------

// KeyQueryResponse

// repeated .BucketKeyAddress addresses = 1;
inline int KeyQueryResponse::addresses_size() const {
  return addresses_.size();
}
inline ::BucketKeyAddress* KeyQueryResponse::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:KeyQueryResponse.addresses)
  return addresses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >*
KeyQueryResponse::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:KeyQueryResponse.addresses)
  return &addresses_;
}
inline const ::BucketKeyAddress& KeyQueryResponse::addresses(int index) const {
  // @@protoc_insertion_point(field_get:KeyQueryResponse.addresses)
  return addresses_.Get(index);
}
inline ::BucketKeyAddress* KeyQueryResponse::add_addresses() {
  // @@protoc_insertion_point(field_add:KeyQueryResponse.addresses)
  return addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >&
KeyQueryResponse::addresses() const {
  // @@protoc_insertion_point(field_list:KeyQueryResponse.addresses)
  return addresses_;
}

// .KVSError error = 2;
inline void KeyQueryResponse::clear_error() {
  error_ = 0;
}
inline ::KVSError KeyQueryResponse::error() const {
  // @@protoc_insertion_point(field_get:KeyQueryResponse.error)
  return static_cast< ::KVSError >(error_);
}
inline void KeyQueryResponse::set_error(::KVSError value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:KeyQueryResponse.error)
}

// string response_id = 3;
inline void KeyQueryResponse::clear_response_id() {
  response_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyQueryResponse::response_id() const {
  // @@protoc_insertion_point(field_get:KeyQueryResponse.response_id)
  return response_id_.GetNoArena();
}
inline void KeyQueryResponse::set_response_id(const ::std::string& value) {
  
  response_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyQueryResponse.response_id)
}
#if LANG_CXX11
inline void KeyQueryResponse::set_response_id(::std::string&& value) {
  
  response_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyQueryResponse.response_id)
}
#endif
inline void KeyQueryResponse::set_response_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyQueryResponse.response_id)
}
inline void KeyQueryResponse::set_response_id(const char* value, size_t size) {
  
  response_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyQueryResponse.response_id)
}
inline ::std::string* KeyQueryResponse::mutable_response_id() {
  
  // @@protoc_insertion_point(field_mutable:KeyQueryResponse.response_id)
  return response_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyQueryResponse::release_response_id() {
  // @@protoc_insertion_point(field_release:KeyQueryResponse.response_id)
  
  return response_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyQueryResponse::set_allocated_response_id(::std::string* response_id) {
  if (response_id != NULL) {
    
  } else {
    
  }
  response_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_id);
  // @@protoc_insertion_point(field_set_allocated:KeyQueryResponse.response_id)
}

// -------------------------------------------------------------------

// KeyNotifyRequest

// string response_address = 1;
inline void KeyNotifyRequest::clear_response_address() {
  response_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyNotifyRequest::response_address() const {
  // @@protoc_insertion_point(field_get:KeyNotifyRequest.response_address)
  return response_address_.GetNoArena();
}
inline void KeyNotifyRequest::set_response_address(const ::std::string& value) {
  
  response_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyNotifyRequest.response_address)
}
#if LANG_CXX11
inline void KeyNotifyRequest::set_response_address(::std::string&& value) {
  
  response_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyNotifyRequest.response_address)
}
#endif
inline void KeyNotifyRequest::set_response_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyNotifyRequest.response_address)
}
inline void KeyNotifyRequest::set_response_address(const char* value, size_t size) {
  
  response_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyNotifyRequest.response_address)
}
inline ::std::string* KeyNotifyRequest::mutable_response_address() {
  
  // @@protoc_insertion_point(field_mutable:KeyNotifyRequest.response_address)
  return response_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyNotifyRequest::release_response_address() {
  // @@protoc_insertion_point(field_release:KeyNotifyRequest.response_address)
  
  return response_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyNotifyRequest::set_allocated_response_address(::std::string* response_address) {
  if (response_address != NULL) {
    
  } else {
    
  }
  response_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_address);
  // @@protoc_insertion_point(field_set_allocated:KeyNotifyRequest.response_address)
}

// repeated .BucketKeyAddress addresses = 2;
inline int KeyNotifyRequest::addresses_size() const {
  return addresses_.size();
}
inline ::BucketKeyAddress* KeyNotifyRequest::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:KeyNotifyRequest.addresses)
  return addresses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >*
KeyNotifyRequest::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:KeyNotifyRequest.addresses)
  return &addresses_;
}
inline const ::BucketKeyAddress& KeyNotifyRequest::addresses(int index) const {
  // @@protoc_insertion_point(field_get:KeyNotifyRequest.addresses)
  return addresses_.Get(index);
}
inline ::BucketKeyAddress* KeyNotifyRequest::add_addresses() {
  // @@protoc_insertion_point(field_add:KeyNotifyRequest.addresses)
  return addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BucketKeyAddress >&
KeyNotifyRequest::addresses() const {
  // @@protoc_insertion_point(field_list:KeyNotifyRequest.addresses)
  return addresses_;
}

// repeated string active_trigger_names = 3;
inline int KeyNotifyRequest::active_trigger_names_size() const {
  return active_trigger_names_.size();
}
inline void KeyNotifyRequest::clear_active_trigger_names() {
  active_trigger_names_.Clear();
}
inline const ::std::string& KeyNotifyRequest::active_trigger_names(int index) const {
  // @@protoc_insertion_point(field_get:KeyNotifyRequest.active_trigger_names)
  return active_trigger_names_.Get(index);
}
inline ::std::string* KeyNotifyRequest::mutable_active_trigger_names(int index) {
  // @@protoc_insertion_point(field_mutable:KeyNotifyRequest.active_trigger_names)
  return active_trigger_names_.Mutable(index);
}
inline void KeyNotifyRequest::set_active_trigger_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:KeyNotifyRequest.active_trigger_names)
  active_trigger_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void KeyNotifyRequest::set_active_trigger_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:KeyNotifyRequest.active_trigger_names)
  active_trigger_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void KeyNotifyRequest::set_active_trigger_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  active_trigger_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KeyNotifyRequest.active_trigger_names)
}
inline void KeyNotifyRequest::set_active_trigger_names(int index, const char* value, size_t size) {
  active_trigger_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KeyNotifyRequest.active_trigger_names)
}
inline ::std::string* KeyNotifyRequest::add_active_trigger_names() {
  // @@protoc_insertion_point(field_add_mutable:KeyNotifyRequest.active_trigger_names)
  return active_trigger_names_.Add();
}
inline void KeyNotifyRequest::add_active_trigger_names(const ::std::string& value) {
  active_trigger_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KeyNotifyRequest.active_trigger_names)
}
#if LANG_CXX11
inline void KeyNotifyRequest::add_active_trigger_names(::std::string&& value) {
  active_trigger_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KeyNotifyRequest.active_trigger_names)
}
#endif
inline void KeyNotifyRequest::add_active_trigger_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  active_trigger_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KeyNotifyRequest.active_trigger_names)
}
inline void KeyNotifyRequest::add_active_trigger_names(const char* value, size_t size) {
  active_trigger_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KeyNotifyRequest.active_trigger_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
KeyNotifyRequest::active_trigger_names() const {
  // @@protoc_insertion_point(field_list:KeyNotifyRequest.active_trigger_names)
  return active_trigger_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
KeyNotifyRequest::mutable_active_trigger_names() {
  // @@protoc_insertion_point(field_mutable_list:KeyNotifyRequest.active_trigger_names)
  return &active_trigger_names_;
}

// string request_id = 4;
inline void KeyNotifyRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyNotifyRequest::request_id() const {
  // @@protoc_insertion_point(field_get:KeyNotifyRequest.request_id)
  return request_id_.GetNoArena();
}
inline void KeyNotifyRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyNotifyRequest.request_id)
}
#if LANG_CXX11
inline void KeyNotifyRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyNotifyRequest.request_id)
}
#endif
inline void KeyNotifyRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyNotifyRequest.request_id)
}
inline void KeyNotifyRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyNotifyRequest.request_id)
}
inline ::std::string* KeyNotifyRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:KeyNotifyRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyNotifyRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:KeyNotifyRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyNotifyRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:KeyNotifyRequest.request_id)
}

// -------------------------------------------------------------------

// KeyNotifyResponse

// .KVSError error = 1;
inline void KeyNotifyResponse::clear_error() {
  error_ = 0;
}
inline ::KVSError KeyNotifyResponse::error() const {
  // @@protoc_insertion_point(field_get:KeyNotifyResponse.error)
  return static_cast< ::KVSError >(error_);
}
inline void KeyNotifyResponse::set_error(::KVSError value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:KeyNotifyResponse.error)
}

// repeated uint32 key_counts = 2;
inline int KeyNotifyResponse::key_counts_size() const {
  return key_counts_.size();
}
inline void KeyNotifyResponse::clear_key_counts() {
  key_counts_.Clear();
}
inline ::google::protobuf::uint32 KeyNotifyResponse::key_counts(int index) const {
  // @@protoc_insertion_point(field_get:KeyNotifyResponse.key_counts)
  return key_counts_.Get(index);
}
inline void KeyNotifyResponse::set_key_counts(int index, ::google::protobuf::uint32 value) {
  key_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:KeyNotifyResponse.key_counts)
}
inline void KeyNotifyResponse::add_key_counts(::google::protobuf::uint32 value) {
  key_counts_.Add(value);
  // @@protoc_insertion_point(field_add:KeyNotifyResponse.key_counts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
KeyNotifyResponse::key_counts() const {
  // @@protoc_insertion_point(field_list:KeyNotifyResponse.key_counts)
  return key_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
KeyNotifyResponse::mutable_key_counts() {
  // @@protoc_insertion_point(field_mutable_list:KeyNotifyResponse.key_counts)
  return &key_counts_;
}

// string response_id = 3;
inline void KeyNotifyResponse::clear_response_id() {
  response_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyNotifyResponse::response_id() const {
  // @@protoc_insertion_point(field_get:KeyNotifyResponse.response_id)
  return response_id_.GetNoArena();
}
inline void KeyNotifyResponse::set_response_id(const ::std::string& value) {
  
  response_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyNotifyResponse.response_id)
}
#if LANG_CXX11
inline void KeyNotifyResponse::set_response_id(::std::string&& value) {
  
  response_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyNotifyResponse.response_id)
}
#endif
inline void KeyNotifyResponse::set_response_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyNotifyResponse.response_id)
}
inline void KeyNotifyResponse::set_response_id(const char* value, size_t size) {
  
  response_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyNotifyResponse.response_id)
}
inline ::std::string* KeyNotifyResponse::mutable_response_id() {
  
  // @@protoc_insertion_point(field_mutable:KeyNotifyResponse.response_id)
  return response_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyNotifyResponse::release_response_id() {
  // @@protoc_insertion_point(field_release:KeyNotifyResponse.response_id)
  
  return response_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyNotifyResponse::set_allocated_response_id(::std::string* response_id) {
  if (response_id != NULL) {
    
  } else {
    
  }
  response_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_id);
  // @@protoc_insertion_point(field_set_allocated:KeyNotifyResponse.response_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KeyRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KeyRequestType>() {
  return ::KeyRequestType_descriptor();
}
template <> struct is_proto_enum< ::HelperResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelperResponseType>() {
  return ::HelperResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_kvs_2eproto
